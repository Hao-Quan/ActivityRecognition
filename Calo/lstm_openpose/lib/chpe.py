# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_chpe')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:

            return importlib.import_module('_chpe')
    _chpe = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_chpe', [dirname(__file__)])
        except ImportError:
            import _chpe
            return _chpe
        try:
            _mod = imp.load_module('_chpe', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _chpe = swig_import_helper()
    del swig_import_helper
else:
    import _chpe
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import builtins

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _chpe.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _chpe.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _chpe.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _chpe.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _chpe.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _chpe.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _chpe.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _chpe.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _chpe.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _chpe.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _chpe.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _chpe.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _chpe.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _chpe.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _chpe.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _chpe.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _chpe.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _chpe.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Point2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _chpe.new_Point2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _chpe.Point2D_x_set
    __swig_getmethods__["x"] = _chpe.Point2D_x_get
    if _newclass:
        x = _swig_property(_chpe.Point2D_x_get, _chpe.Point2D_x_set)
    __swig_setmethods__["y"] = _chpe.Point2D_y_set
    __swig_getmethods__["y"] = _chpe.Point2D_y_get
    if _newclass:
        y = _swig_property(_chpe.Point2D_y_get, _chpe.Point2D_y_set)
    __swig_setmethods__["score"] = _chpe.Point2D_score_set
    __swig_getmethods__["score"] = _chpe.Point2D_score_get
    if _newclass:
        score = _swig_property(_chpe.Point2D_score_get, _chpe.Point2D_score_set)
    __swig_destroy__ = _chpe.delete_Point2D
    __del__ = lambda self: None
Point2D_swigregister = _chpe.Point2D_swigregister
Point2D_swigregister(Point2D)

class StdHumanPose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdHumanPose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdHumanPose, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _chpe.new_StdHumanPose()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["keypoints"] = _chpe.StdHumanPose_keypoints_set
    __swig_getmethods__["keypoints"] = _chpe.StdHumanPose_keypoints_get
    if _newclass:
        keypoints = _swig_property(_chpe.StdHumanPose_keypoints_get, _chpe.StdHumanPose_keypoints_set)
    __swig_setmethods__["score"] = _chpe.StdHumanPose_score_set
    __swig_getmethods__["score"] = _chpe.StdHumanPose_score_get
    if _newclass:
        score = _swig_property(_chpe.StdHumanPose_score_get, _chpe.StdHumanPose_score_set)
    __swig_destroy__ = _chpe.delete_StdHumanPose
    __del__ = lambda self: None
StdHumanPose_swigregister = _chpe.StdHumanPose_swigregister
StdHumanPose_swigregister(StdHumanPose)

class BBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBox, name)
    __repr__ = _swig_repr

    def __init__(self, xtl: 'int const &', ytl: 'int const &', xbr: 'int const &', ybr: 'int const &'):
        this = _chpe.new_BBox(xtl, ytl, xbr, ybr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["xtl"] = _chpe.BBox_xtl_set
    __swig_getmethods__["xtl"] = _chpe.BBox_xtl_get
    if _newclass:
        xtl = _swig_property(_chpe.BBox_xtl_get, _chpe.BBox_xtl_set)
    __swig_setmethods__["ytl"] = _chpe.BBox_ytl_set
    __swig_getmethods__["ytl"] = _chpe.BBox_ytl_get
    if _newclass:
        ytl = _swig_property(_chpe.BBox_ytl_get, _chpe.BBox_ytl_set)
    __swig_setmethods__["xbr"] = _chpe.BBox_xbr_set
    __swig_getmethods__["xbr"] = _chpe.BBox_xbr_get
    if _newclass:
        xbr = _swig_property(_chpe.BBox_xbr_get, _chpe.BBox_xbr_set)
    __swig_setmethods__["ybr"] = _chpe.BBox_ybr_set
    __swig_getmethods__["ybr"] = _chpe.BBox_ybr_get
    if _newclass:
        ybr = _swig_property(_chpe.BBox_ybr_get, _chpe.BBox_ybr_set)
    __swig_destroy__ = _chpe.delete_BBox
    __del__ = lambda self: None
BBox_swigregister = _chpe.BBox_swigregister
BBox_swigregister(BBox)

class CameraHPE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraHPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraHPE, name)
    __repr__ = _swig_repr

    def __init__(self, modelPath: 'std::string const &', targetDeviceName: 'std::string const &', videoPath: 'std::string const &', enablePerformanceReport: 'bool', show_keypoints_index: 'bool', show_x: 'bool'):
        this = _chpe.new_CameraHPE(modelPath, targetDeviceName, videoPath, enablePerformanceReport, show_keypoints_index, show_x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _chpe.delete_CameraHPE
    __del__ = lambda self: None

    def estimate_poses(self) -> "std::vector< human_pose_estimation::StdHumanPose,std::allocator< human_pose_estimation::StdHumanPose > >":
        return _chpe.CameraHPE_estimate_poses(self)

    def estimate_pose(self, bbox: 'BBox') -> "human_pose_estimation::StdHumanPose":
        return _chpe.CameraHPE_estimate_pose(self, bbox)

    def read(self) -> "bool":
        return _chpe.CameraHPE_read(self)

    def render_poses(self) -> "bool":
        return _chpe.CameraHPE_render_poses(self)

    def render_bbox(self, bbox: 'BBox', class_id: 'int', label: 'std::string const &') -> "bool":
        return _chpe.CameraHPE_render_bbox(self, bbox, class_id, label)

    def get_inference_time(self) -> "double":
        return _chpe.CameraHPE_get_inference_time(self)

    def get_instant_inference_time(self) -> "double":
        return _chpe.CameraHPE_get_instant_inference_time(self)

    def set_id(self, index: 'int', id: 'int') -> "void":
        return _chpe.CameraHPE_set_id(self, index, id)

    def get_image_cols(self) -> "int":
        return _chpe.CameraHPE_get_image_cols(self)

    def get_image_rows(self) -> "int":
        return _chpe.CameraHPE_get_image_rows(self)
CameraHPE_swigregister = _chpe.CameraHPE_swigregister
CameraHPE_swigregister(CameraHPE)

class CameraHPEProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraHPEProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraHPEProxy, name)
    __repr__ = _swig_repr

    def __init__(self, modelPath: 'std::string const &', targetDeviceName: 'std::string const &', videoPath: 'std::string const &', enablePerformanceReport: 'bool'=False, show_keypoints_index: 'bool'=False, show_x: 'bool'=False):
        this = _chpe.new_CameraHPEProxy(modelPath, targetDeviceName, videoPath, enablePerformanceReport, show_keypoints_index, show_x)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _chpe.delete_CameraHPEProxy
    __del__ = lambda self: None

    def estimate_poses(self) -> "std::vector< human_pose_estimation::StdHumanPose,std::allocator< human_pose_estimation::StdHumanPose > >":
        return _chpe.CameraHPEProxy_estimate_poses(self)

    def estimate_pose(self, bbox: 'BBox') -> "human_pose_estimation::StdHumanPose":
        return _chpe.CameraHPEProxy_estimate_pose(self, bbox)

    def read(self) -> "bool":
        return _chpe.CameraHPEProxy_read(self)

    def render_poses(self) -> "bool":
        return _chpe.CameraHPEProxy_render_poses(self)

    def render_bbox(self, bbox: 'BBox', class_id: 'int', label: 'std::string const &') -> "bool":
        return _chpe.CameraHPEProxy_render_bbox(self, bbox, class_id, label)

    def get_inference_time(self) -> "double":
        return _chpe.CameraHPEProxy_get_inference_time(self)

    def get_instant_inference_time(self) -> "double":
        return _chpe.CameraHPEProxy_get_instant_inference_time(self)

    def set_id(self, index: 'int', id: 'int') -> "void":
        return _chpe.CameraHPEProxy_set_id(self, index, id)

    def get_image_cols(self) -> "int":
        return _chpe.CameraHPEProxy_get_image_cols(self)

    def get_image_rows(self) -> "int":
        return _chpe.CameraHPEProxy_get_image_rows(self)
CameraHPEProxy_swigregister = _chpe.CameraHPEProxy_swigregister
CameraHPEProxy_swigregister(CameraHPEProxy)

class Point2DVector(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2DVector, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point2DVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _chpe.Point2DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _chpe.Point2DVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _chpe.Point2DVector___bool__(self)

    def __len__(self) -> "std::vector< human_pose_estimation::Point2D >::size_type":
        return _chpe.Point2DVector___len__(self)

    def __getslice__(self, i: 'std::vector< human_pose_estimation::Point2D >::difference_type', j: 'std::vector< human_pose_estimation::Point2D >::difference_type') -> "std::vector< human_pose_estimation::Point2D,std::allocator< human_pose_estimation::Point2D > > *":
        return _chpe.Point2DVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _chpe.Point2DVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< human_pose_estimation::Point2D >::difference_type', j: 'std::vector< human_pose_estimation::Point2D >::difference_type') -> "void":
        return _chpe.Point2DVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _chpe.Point2DVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< human_pose_estimation::Point2D >::value_type const &":
        return _chpe.Point2DVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _chpe.Point2DVector___setitem__(self, *args)

    def pop(self) -> "std::vector< human_pose_estimation::Point2D >::value_type":
        return _chpe.Point2DVector_pop(self)

    def append(self, x: 'Point2D') -> "void":
        return _chpe.Point2DVector_append(self, x)

    def empty(self) -> "bool":
        return _chpe.Point2DVector_empty(self)

    def size(self) -> "std::vector< human_pose_estimation::Point2D >::size_type":
        return _chpe.Point2DVector_size(self)

    def swap(self, v: 'Point2DVector') -> "void":
        return _chpe.Point2DVector_swap(self, v)

    def begin(self) -> "std::vector< human_pose_estimation::Point2D >::iterator":
        return _chpe.Point2DVector_begin(self)

    def end(self) -> "std::vector< human_pose_estimation::Point2D >::iterator":
        return _chpe.Point2DVector_end(self)

    def rbegin(self) -> "std::vector< human_pose_estimation::Point2D >::reverse_iterator":
        return _chpe.Point2DVector_rbegin(self)

    def rend(self) -> "std::vector< human_pose_estimation::Point2D >::reverse_iterator":
        return _chpe.Point2DVector_rend(self)

    def clear(self) -> "void":
        return _chpe.Point2DVector_clear(self)

    def get_allocator(self) -> "std::vector< human_pose_estimation::Point2D >::allocator_type":
        return _chpe.Point2DVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _chpe.Point2DVector_pop_back(self)

    def erase(self, *args) -> "std::vector< human_pose_estimation::Point2D >::iterator":
        return _chpe.Point2DVector_erase(self, *args)

    def __init__(self, *args):
        this = _chpe.new_Point2DVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'Point2D') -> "void":
        return _chpe.Point2DVector_push_back(self, x)

    def front(self) -> "std::vector< human_pose_estimation::Point2D >::value_type const &":
        return _chpe.Point2DVector_front(self)

    def back(self) -> "std::vector< human_pose_estimation::Point2D >::value_type const &":
        return _chpe.Point2DVector_back(self)

    def assign(self, n: 'std::vector< human_pose_estimation::Point2D >::size_type', x: 'Point2D') -> "void":
        return _chpe.Point2DVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _chpe.Point2DVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _chpe.Point2DVector_insert(self, *args)

    def reserve(self, n: 'std::vector< human_pose_estimation::Point2D >::size_type') -> "void":
        return _chpe.Point2DVector_reserve(self, n)

    def capacity(self) -> "std::vector< human_pose_estimation::Point2D >::size_type":
        return _chpe.Point2DVector_capacity(self)
    __swig_destroy__ = _chpe.delete_Point2DVector
    __del__ = lambda self: None
Point2DVector_swigregister = _chpe.Point2DVector_swigregister
Point2DVector_swigregister(Point2DVector)

class StdHumanPoseVector(collections.MutableSequence):
    __swig_setmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdHumanPoseVector, name, value)
    __swig_getmethods__ = {}
    for _s in [collections.MutableSequence]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StdHumanPoseVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _chpe.StdHumanPoseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _chpe.StdHumanPoseVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _chpe.StdHumanPoseVector___bool__(self)

    def __len__(self) -> "std::vector< human_pose_estimation::StdHumanPose >::size_type":
        return _chpe.StdHumanPoseVector___len__(self)

    def __getslice__(self, i: 'std::vector< human_pose_estimation::StdHumanPose >::difference_type', j: 'std::vector< human_pose_estimation::StdHumanPose >::difference_type') -> "std::vector< human_pose_estimation::StdHumanPose,std::allocator< human_pose_estimation::StdHumanPose > > *":
        return _chpe.StdHumanPoseVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _chpe.StdHumanPoseVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< human_pose_estimation::StdHumanPose >::difference_type', j: 'std::vector< human_pose_estimation::StdHumanPose >::difference_type') -> "void":
        return _chpe.StdHumanPoseVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _chpe.StdHumanPoseVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< human_pose_estimation::StdHumanPose >::value_type const &":
        return _chpe.StdHumanPoseVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _chpe.StdHumanPoseVector___setitem__(self, *args)

    def pop(self) -> "std::vector< human_pose_estimation::StdHumanPose >::value_type":
        return _chpe.StdHumanPoseVector_pop(self)

    def append(self, x: 'StdHumanPose') -> "void":
        return _chpe.StdHumanPoseVector_append(self, x)

    def empty(self) -> "bool":
        return _chpe.StdHumanPoseVector_empty(self)

    def size(self) -> "std::vector< human_pose_estimation::StdHumanPose >::size_type":
        return _chpe.StdHumanPoseVector_size(self)

    def swap(self, v: 'StdHumanPoseVector') -> "void":
        return _chpe.StdHumanPoseVector_swap(self, v)

    def begin(self) -> "std::vector< human_pose_estimation::StdHumanPose >::iterator":
        return _chpe.StdHumanPoseVector_begin(self)

    def end(self) -> "std::vector< human_pose_estimation::StdHumanPose >::iterator":
        return _chpe.StdHumanPoseVector_end(self)

    def rbegin(self) -> "std::vector< human_pose_estimation::StdHumanPose >::reverse_iterator":
        return _chpe.StdHumanPoseVector_rbegin(self)

    def rend(self) -> "std::vector< human_pose_estimation::StdHumanPose >::reverse_iterator":
        return _chpe.StdHumanPoseVector_rend(self)

    def clear(self) -> "void":
        return _chpe.StdHumanPoseVector_clear(self)

    def get_allocator(self) -> "std::vector< human_pose_estimation::StdHumanPose >::allocator_type":
        return _chpe.StdHumanPoseVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _chpe.StdHumanPoseVector_pop_back(self)

    def erase(self, *args) -> "std::vector< human_pose_estimation::StdHumanPose >::iterator":
        return _chpe.StdHumanPoseVector_erase(self, *args)

    def __init__(self, *args):
        this = _chpe.new_StdHumanPoseVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StdHumanPose') -> "void":
        return _chpe.StdHumanPoseVector_push_back(self, x)

    def front(self) -> "std::vector< human_pose_estimation::StdHumanPose >::value_type const &":
        return _chpe.StdHumanPoseVector_front(self)

    def back(self) -> "std::vector< human_pose_estimation::StdHumanPose >::value_type const &":
        return _chpe.StdHumanPoseVector_back(self)

    def assign(self, n: 'std::vector< human_pose_estimation::StdHumanPose >::size_type', x: 'StdHumanPose') -> "void":
        return _chpe.StdHumanPoseVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _chpe.StdHumanPoseVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _chpe.StdHumanPoseVector_insert(self, *args)

    def reserve(self, n: 'std::vector< human_pose_estimation::StdHumanPose >::size_type') -> "void":
        return _chpe.StdHumanPoseVector_reserve(self, n)

    def capacity(self) -> "std::vector< human_pose_estimation::StdHumanPose >::size_type":
        return _chpe.StdHumanPoseVector_capacity(self)
    __swig_destroy__ = _chpe.delete_StdHumanPoseVector
    __del__ = lambda self: None
StdHumanPoseVector_swigregister = _chpe.StdHumanPoseVector_swigregister
StdHumanPoseVector_swigregister(StdHumanPoseVector)

# This file is compatible with both classic and new-style classes.


